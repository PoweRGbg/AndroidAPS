package info.nightscout.androidaps.plugins.iob.iobCobCalculator.carbs;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.util.ArrayList;
import java.util.List;

import info.AAPSMocker;
import info.SPMocker;
import info.nightscout.androidaps.MainApp;
import info.nightscout.androidaps.plugins.iob.iobCobCalculator.IobCobCalculatorPlugin;
import info.nightscout.androidaps.plugins.treatments.Treatment;
import info.nightscout.androidaps.utils.DateUtil;
import info.nightscout.androidaps.utils.SP;

@RunWith(PowerMockRunner.class)
@PrepareForTest({MainApp.class, IobCobCalculatorPlugin.class, DateUtil.class, SP.class})
public class ActiveCarbTest {

    @Before
    public void initMocking() {
        AAPSMocker.mockMainApp();
        AAPSMocker.mockStrings();
        SPMocker.prepareMock();
    }

    @Test
    public void carbsInPastTrianglesInitialPrediction() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 50;

        ActiveCarbFromTriangles activeCarb = new ActiveCarbFromTriangles(t);
        activeCarb.maxAbsorptionHours = 6;
        List<Double> prediction = activeCarb.getPredicatedCarbs((int) activeCarb.maxAbsorptionHours*12);

        Assert.assertEquals(activeCarb.remaining, prediction.stream().mapToDouble(Double::doubleValue).sum(), 0.1d);
    }

    @Test
    public void carbsInPastTrianglesAfterDeviations() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 50;

        ActiveCarbFromTriangles activeCarb = new ActiveCarbFromTriangles(t);
        activeCarb.maxAbsorptionHours = 6;

        activeCarb.carbAbsorptionHistory.put(0, 0d);
        activeCarb.carbAbsorptionHistory.put(5, 1d);
        activeCarb.carbAbsorptionHistory.put(10, 4d);
        activeCarb.carbAbsorptionHistory.put(15, 8d);
        activeCarb.remaining = activeCarb.carbs - (0d+1d+4d+8d);

        List<Double> prediction = activeCarb.getPredicatedCarbs((int) activeCarb.maxAbsorptionHours*12);

        Assert.assertEquals(activeCarb.remaining, prediction.stream().mapToDouble(Double::doubleValue).sum(), 0.1d);
    }

    @Test
    public void carbsInPastSingleCurvePrediction() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 15;

        ActiveCarbFromNormalCurves activeCarb = new ActiveCarbFromNormalCurves(t);

        while(activeCarb.carbsDistributions.size() > 1) {
            activeCarb.carbsDistributions.remove(1);
        }
        activeCarb.carbsDistributions.get(0).carbs = 15d;
        activeCarb.carbsDistributions.get(0).median = 40d;
        activeCarb.carbsDistributions.get(0).standardDeviation = 10d;

        Assert.assertEquals(15d, activeCarb.carbsDistributions.get(0).carbs, 1d);
        Assert.assertEquals(40d, activeCarb.carbsDistributions.get(0).median, 1d);
        Assert.assertEquals(10d, activeCarb.carbsDistributions.get(0).standardDeviation, 1d);

        displaycarbsDistributions(activeCarb);
        List<Double> prediction = activeCarb.getPredicatedCarbs(12);

        Assert.assertEquals(0d, prediction.get(0), 0.1d);
        Assert.assertEquals(3d, prediction.get(7), 0.1d);
        Assert.assertEquals(activeCarb.remaining, prediction.stream().mapToDouble(Double::doubleValue).sum(), 0.2d);
    }

    @Test
    public void carbsInPastPredictionAfterThreeTicks() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 15;

        ActiveCarbFromNormalCurves activeCarb = new ActiveCarbFromNormalCurves(t);

        while(activeCarb.carbsDistributions.size() > 1) {
            activeCarb.carbsDistributions.remove(1);
        }
        activeCarb.carbsDistributions.get(0).carbs = 15d;
        activeCarb.carbsDistributions.get(0).median = 40d;
        activeCarb.carbsDistributions.get(0).standardDeviation = 10d;

        activeCarb.carbAbsorptionHistory.put(0, 0.0001d);
        activeCarb.carbAbsorptionHistory.put(5, 0.006d);
        activeCarb.carbAbsorptionHistory.put(10, 0.033d);
        activeCarb.remaining -= (0.0001d + 0.006d + 0.033d);

        List<Double> prediction = activeCarb.getPredicatedCarbs(12);

        Assert.assertEquals(3d, prediction.get(5), 0.1d);
        Assert.assertEquals(activeCarb.remaining, prediction.stream().mapToDouble(Double::doubleValue).sum(), 0.1d);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakPerfectData() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 15;

        ActiveCarbFromNormalCurves activeCarb = new ActiveCarbFromNormalCurves(t);

        activeCarb.carbAbsorptionHistory.put(0, 0.000d);
        activeCarb.carbAbsorptionHistory.put(5, 0.002d);
        activeCarb.carbAbsorptionHistory.put(10, 0.066d);
        activeCarb.carbAbsorptionHistory.put(15, 0.809d);
        activeCarb.carbAbsorptionHistory.put(20, 3.629d);
        activeCarb.carbAbsorptionHistory.put(25, 5.984d);
        activeCarb.remaining -= (0.000d + 0.002d + 0.066d + 0.809d + 3.629d + 5.984d);

        // 2.230079272101448E-5, 0.0020074533864732807, 0.06647772617907012, 0.8098644976978208, 3.62956086778715, 5.98413420602149, 3.62956086778715, 0.8098644976978208, 0.06647772617907012, 0.0020074533864732807, 2.230079272101448E-5, 9.113824274734936E-8

        activeCarb.estimateCarbsDistributionFromAborptionHistory();

        displaycarbsDistributions(activeCarb);

        Assert.assertEquals(15, activeCarb.carbsDistributions.get(0).carbs, 1);
        Assert.assertEquals(25, activeCarb.carbsDistributions.get(0).median, 1);
        Assert.assertEquals(5, activeCarb.carbsDistributions.get(0).standardDeviation, 1);
        //Assert.assertEquals(0, activeCarb.carbsDistributions.get(1).carbs, 2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakOneShort() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 15;

        ActiveCarbFromNormalCurves activeCarb = new ActiveCarbFromNormalCurves(t);

        activeCarb.carbAbsorptionHistory.put(0, 0.000d);
        activeCarb.carbAbsorptionHistory.put(5, 0.002d);
        activeCarb.carbAbsorptionHistory.put(10, 0.066d);
        activeCarb.carbAbsorptionHistory.put(15, 0.809d);
        activeCarb.carbAbsorptionHistory.put(20, 3.629d);
        activeCarb.remaining -= (0.000d + 0.002d + 0.066d + 0.809d + 3.629d);

        // 2.230079272101448E-5, 0.0020074533864732807, 0.06647772617907012, 0.8098644976978208, 3.62956086778715, 5.98413420602149, 3.62956086778715, 0.8098644976978208, 0.06647772617907012, 0.0020074533864732807, 2.230079272101448E-5, 9.113824274734936E-8

        activeCarb.estimateCarbsDistributionFromAborptionHistory();

        displaycarbsDistributions(activeCarb);

        Assert.assertEquals(15, activeCarb.carbsDistributions.get(0).carbs, 1);
        Assert.assertEquals(25, activeCarb.carbsDistributions.get(0).median, 1);
        Assert.assertEquals(5, activeCarb.carbsDistributions.get(0).standardDeviation, 1);
        //Assert.assertEquals(0, activeCarb.carbsDistributions.get(1).carbs, 2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakMessyData() {
        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = 15;

        ActiveCarbFromNormalCurves activeCarb = new ActiveCarbFromNormalCurves(t);

        activeCarb.carbAbsorptionHistory.put(0, 0.000d);
        activeCarb.carbAbsorptionHistory.put(5, 0.000d);
        activeCarb.carbAbsorptionHistory.put(10, 0.1d);
        activeCarb.carbAbsorptionHistory.put(15, 0.5d);
        activeCarb.carbAbsorptionHistory.put(20, 3.2d);
        activeCarb.carbAbsorptionHistory.put(25, 6d);

        activeCarb.estimateCarbsDistributionFromAborptionHistory();

        displaycarbsDistributions(activeCarb);

        Assert.assertEquals(15, activeCarb.carbsDistributions.get(0).carbs, 1);
        Assert.assertEquals(25, activeCarb.carbsDistributions.get(0).median, 1);
        Assert.assertEquals(5, activeCarb.carbsDistributions.get(0).standardDeviation, 1);
        //Assert.assertEquals(0, activeCarb.carbsDistributions.get(1).carbs, 1);
    }

    private void displaycarbsDistributions(ActiveCarbFromNormalCurves activeCarb) {

        System.out.println("At "+(activeCarb.carbAbsorptionHistory.size()*5)+" minutes");
        for (int i = 0; i < activeCarb.carbsDistributions.size(); ++i) {
            CarbsNormalDistribution cd = activeCarb.carbsDistributions.get(i);
            System.out.println(i+": carbs: "+cd.carbs+", median: "+cd.median+", stdDev: "+cd.standardDeviation);
        }
    }

    private double calculatePredictionScore(int i, List<Double> prediction, double[] data) {
        double score = 0d;
        double cumalativeDeviationPredicted = 0d;
        double cumalativeDeviationActual = 0d;
        for (int j = 0; j < prediction.size(); ++j) {
            cumalativeDeviationPredicted += prediction.get(j);
            cumalativeDeviationActual += data[i+j+1];
            // Overestimating is more dangerous, weight score to allow for this
            double directionFactor = 1;
            if (cumalativeDeviationPredicted > cumalativeDeviationActual) {
                directionFactor = 2;
            }
            score += Math.pow(cumalativeDeviationPredicted - cumalativeDeviationActual, 2) * directionFactor;
        }
        return score / prediction.size();
    }

    private double runPrediction(double carbs, double[] data) {
        return runPrediction(carbs, "", data, true);
    }

    private double runPrediction(double carbs, String notes, double[] data, boolean detailedDisplay) {

        Treatment t = new Treatment();
        t.date = 24 * 60 * 60 * 1000;
        t.carbs = carbs;
        t.notes = notes;

        ActiveCarbFromTriangles activeCarbFromTriangle = new ActiveCarbFromTriangles(t);
        double avgPredictionErrorTriangles = 0;

        ActiveCarbFromNormalCurves activeCarbFromNormalCurves = new ActiveCarbFromNormalCurves(t);
        double avgPredictionErrorCurves = 0;

        ActiveCarbFromDeviationHistory activeCarbFromDeviationHistory = new ActiveCarbFromDeviationHistory(t);
        double avgPredictionErrorPreexisting = 0;

        int pointCount = 0;
        // Don't bother to score the last 10% - not enough future data
        for (int i = 0; i < data.length*0.9 && i < 36; ++i) {

            activeCarbFromTriangle.carbAbsorptionHistory.put(i*5, data[i]);
            activeCarbFromTriangle.remaining -= data[i];

            activeCarbFromNormalCurves.carbAbsorptionHistory.put(i*5, data[i]);
            activeCarbFromNormalCurves.remaining -= data[i];

            activeCarbFromDeviationHistory.carbAbsorptionHistory.put(i*5, data[i]);
            activeCarbFromDeviationHistory.remaining -= data[i];

            activeCarbFromNormalCurves.estimateCarbsDistributionFromAborptionHistory();
            if (detailedDisplay) displaycarbsDistributions(activeCarbFromNormalCurves);

            if (data.length - i > 1) {
                pointCount += data.length - (i+1);

                List<Double> prediction = activeCarbFromTriangle.getPredicatedCarbs(data.length - (i+1));
                double score = calculatePredictionScore(i, prediction, data);
                avgPredictionErrorTriangles += score * prediction.size();
                if (detailedDisplay) System.out.println("Prediction Score (Triangles): "+score);

                prediction = activeCarbFromNormalCurves.getPredicatedCarbs(data.length - (i+1));
                score = calculatePredictionScore(i, prediction, data);
                avgPredictionErrorCurves += score * prediction.size();
                if (detailedDisplay) System.out.println("Prediction Score (Curves): "+score);

                prediction = activeCarbFromDeviationHistory.getPredicatedCarbs(data.length - (i+1));
                score = calculatePredictionScore(i, prediction, data);
                avgPredictionErrorPreexisting += score * prediction.size();
                if (detailedDisplay) System.out.println("Prediction Score (Replay): "+score);

                if (detailedDisplay) System.out.println("");
            }
        }

        activeCarbFromNormalCurves.estimateCarbsDistributionFromAborptionHistory();
        //displaycarbsDistributions(activeCarb);

        // Error per-carb to make easier to compare between deviation sets
        pointCount = (int)(pointCount * activeCarbFromTriangle.carbs);

        avgPredictionErrorTriangles = avgPredictionErrorTriangles / pointCount;
        System.out.println("\nAvg Prediction Score (Triangles): "+avgPredictionErrorTriangles);

        avgPredictionErrorCurves = avgPredictionErrorCurves / pointCount;
        System.out.println("Avg Prediction Score (Curves): "+avgPredictionErrorCurves);

        avgPredictionErrorPreexisting = avgPredictionErrorPreexisting / pointCount;
        System.out.println("Avg Prediction Score (Replay): "+avgPredictionErrorPreexisting);

        return avgPredictionErrorPreexisting;
        //return avgPredictionErrorTriangles;
    }

    private void printDataForExcel(double[] data) {
        for (int i = 0; i < data.length; ++i) {
            System.out.println(data[i]);
        }

    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction() {
        double data[] = {
                1.4768569083523455, 1.4830728642031201, 1.7122874639297012, 2.0478148148148154,
                3.080333333333334, 4.027259259259259, 4.621314814814815, 3.3705185185185185,
                3.213333333333334, 2.0166296296296293, 1.8139444444444448, 2.145814814814815,
                1.90462962962963, 1.8311296296296296, 0.25506054129259725
        };

        double avgPredictionError = runPrediction(35, data);
        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction2() {
/*
        // Manually estimated
        activeCarb.carbsDistributions.get(0).carbs = 13;
        activeCarb.carbsDistributions.get(0).median = 52;
        activeCarb.carbsDistributions.get(0).standardDeviation = 17;
        activeCarb.carbsDistributions.get(1).carbs = 15;
        activeCarb.carbsDistributions.get(1).median = 120;
        activeCarb.carbsDistributions.get(1).standardDeviation = 65;
        activeCarb.carbsDistributions.get(2).carbs = 16;
        activeCarb.carbsDistributions.get(2).median = 200;
        activeCarb.carbsDistributions.get(2).standardDeviation = 100;
*/
        double data[] = {0.3461329779503945, 0.5433935949657436, 0.5471751582507259, 0.5511203142359876,
                0.6038916607409763, 0.9394789234045677, 0.8785839141577448, 0.9394789234045677,
                1.5682591528789434,        2.17955770658882,        1.1352489974050481,
                0.6514507147302755,        1.3442585577654902,        1.6500001198837833,
                1.3779704567161588,        0.8710778778243342,        0.6210136565931352,        0.6303450585241215,
                0.9412036337005807,        0.6436462266831815,        0.656709608904616,        0.6716978601398413,
                0.6891073557252962,        0.7096234387584895,        0.7342193264213508,        0.7643239034077747,
                0.838767343129412,        1.137708459148396,        0.9042597937511193,        0.9975790295172355,
                1.1418848222961617,        0.6192956163243545,        0.8268518524702416,        1.5572775061612982,
                0.19010439505677879,        0.19414383487991094,        0.21739728276841438,        0.3438572902135687,
                0.3825145264271411,        0.392898284122361
        };
        double avgPredictionError = runPrediction(45, data);
        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction3() {
        double data[] = {0.248, 1.005, 1.071, 0.953, 0.801, 0.585, 0.348, 0.272, 0.699, 0.858, 0.784};
        double avgPredictionError = runPrediction(30, data);
        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction4() {

        double data[] = {
                0.7352874396135266,0.18091787439613524,0.5075000000000001,1.2182874396135264,1.5594106280193234,2.052115942028986,2.1396159420289855,1.1455821256038647,2.2335748792270533,2.6662391304347826,2.1264106280193236,1.6781231884057972,1.6035410628019322,1.4939589371980675,1.6030000000000004,1.1837946859903383,0.5710072463768114,0.874171497584541,0.14184299516908194,1.005294685990338,1.7842053140096619,1.9608285024154593,1.2850410628019324,1.1235000000000002,0.9689589371980678,2.7903623188405797,0.8634178743961355,1.4161642512077297,1.2045410628019322,0.5492125603864736,0.8028357487922707,0.9474178743961353,1.0885,1.043,1.0785410628019325,1.2831642512077295,1.3432053140096618,1.0895821256038647,0.924,1.762410628019324,2.030033816425121,1.885451690821256,1.0680410628019326,0.31767149758454105,0.14158937198067642,0.20513043478260878,0.3235169082125661
        };

        printDataForExcel(data);

        double avgPredictionError = runPrediction(58, data);

        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction5() {

        double data[] = {
                0.07108212560386473,0.05358212560386475,0.2592236910823868,1.1270920802045925,1.199188789965521,1.0631748971419102,0.8880668823503209,0.6434640571666994,0.3754247550070983,0.2915835875921687,0.7640598089783348,0.9335328915268597,0.8497371695783034,0.7134786165327212,0.5332934140649691,0.3856014076295186,0.47868901477933345,0.6495229706868719,0.36846531874347593,0.5340547375160053,0.5760849029086417,0.7040496125938364,0.8552163977171288,1.1220665775526477,0.9338436392344432,1.0063868011423618,0.7999633098576452,0.5303583622019047,0.5228261234127519,0.45849470111088153,0.5447680541831358,0.5374021950131425,0.44008540564046766,0.377995069671819,0.5454119606488722,0.5911602652540027,0.514184489860583,0.4341472520018529,0.35436606012350014,0.4312386533690881,0.43214984786755406,0.3296827300041776,0.351811961230776,0.25319153700069996,0.23306433241712474,0.1693119432398038,0.220524350524206,0.11696551112716952,0.08784852419647596,0.02228317242436188,0.04133635265700483,0.05066721774602211,0.022481543130648728,0.034822876566274155,0.00865725038587208,0.020852352400495912,0.07020111557570347,0.013218750000000001,0.06260090546347453,0.14572399016355278,0.16332182791054806,0.38578329793192545,0.2926642512077295
        };

        printDataForExcel(data);

        double avgPredictionError = runPrediction(28, data);

        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    @Test
    public void estimateCarbsDistributionFromAborptionHistorySinglePeakRealDataForwardPrediction6() {
        double data[] = {
                0.2754816229272752,1.198852364239852,1.2767145916769913,1.132982107689008,0.9473026828670708,0.6870770056352331,0.40128780537937525,0.31200578438850735,0.8184812538235978,1.0011724224828022,0.9123860188274937,0.7670213834672791,0.5740423347273015,0.41561115275695487,0.5166467340129369,0.7020180921150604,0.39882936724686235,0.578945262483995,0.6254972226952235,0.7656967642177581,0.9316942303021949,1.2245904272782702,1.0210669887848807,1.102523826876962,0.878159878548152,0.5834363237884338,0.576427499775654,0.5066767964736597,0.6034855690052702,0.5968514281752635,0.4900860919440736,0.4221353651107895,0.6109237881433983,0.6642576091421324,0.5796923217336198,0.49118849679041754,0.40242862586683814,0.49167922102704714,0.4948090893305136,0.37919408159002543,0.40660591316535927,0.2941442117915705,0.2722714163751458,0.19898274275053437,0.26085246106999693,0.13932917486316856,0.10544616179386224,0.026970450764044012,0.050999396135265704,0.06320959384818083,0.02839526846355424,0.04459499782986111,0.011260624010263206,0.02760658479757171,0.0948399472262289,0.018281250000000002,0.08898122014039023,0.21398132384610904,0.2494245489010462,0.04446307887966877
        };
        printDataForExcel(data);
        double avgPredictionError = runPrediction(30, data);

        Assert.assertEquals(0, avgPredictionError, 0.2);
    }

    static String[] lineData = {
            "2019-11-05T09:48:55Z,Porridge with caramel sauce,30,5.6,0,0.0,0.17009345794392525,0.7176035035441781,1.6485665267054948,2.5370061853808297,2.469325928935844,2.2942074134272428,1.855652625400695,1.5796379069032462,1.1214569506523997,0.9785430493476004,0.8258160639306517,0.7412750011287194,0.5591087633753219,0.3638584134723917,0.41568919590049225,0.37316583141451093,0.4964535644950111,0.5253871506614295,0.4697796740259154,0.41090116935301824,0.2674816018781887,0.20533206916790836,0.3155356900988759,0.25338615738859543,0.2790487155176306,0.3892523364485982,0.24910379701115176,0.20985146056255366,0.0,0.14115987177750694,0.18971962616822433,0.23827938055894174,0.21865321233464263,0.20556910018510993,0.21211115625987628,0.31627838728610774,0.09536547925414243,0.044396808088481975,0.07936896386826617,0.10120201482897105,0.18991793938774715,0.26630647918093286,0.35812801931182897,0.3523602773921863",
            "2019-11-13T10:05:59Z,Porridge with caramel sauce,30,8.5,0,0.0,0.26474879227053133,0.6438309178743961,0.8141642512077295,1.4544106280193239,1.808367149758454,2.22119806763285,2.1011159420289856,2.04924154589372,2.145449275362319,1.8894927536231885,1.7932850241545895,1.2767053140096618,0.9292077294685989,0.9105410628019323,0.8872077294685988,0.8568743961352656,0.8242077294685989,0.6131256038647342,0.6556666666666665,0.6935410628019323,0.5623333333333334,0.17750241545893716,0.0,0.0,0.0,0.044589426348367496,0.0,0.0,0.0,0.0,0.01189082787958815,0.19682608711208682,0.2822352097358207,0.39543282816955566,0.4738465489173783,0.3356190386804908",
            "2019-11-03T18:41:07Z,Salmon 2 roast potatoes 1 parsnip,9,0.8,0,0.0,0.15198428822971705,0.34396361009526394,0.18142354056616555,0.17815251252878242,0.5943157704636779,1.3388301954941533,0.5517924059776965,0.697977335319879,0.32710280373831774,0.0,0.15474965009706987,0.0,0.0,0.05712447514560479",
            "2019-11-04T09:53:41Z,Waffle blueberries and cream,29,4.2,0,0.0,0.2921328276671633,0.36787213869700663,0.8303354553252967,1.2633595196171383,1.6669443315725316,1.7940087588604454,1.3942006411124654,1.2283895435459842,0.9682242990654205,1.2054923472843018,1.2605941577497857,1.2246128493385706,1.097548422050657,0.889213959998194,0.8466905955122128,0.8008962029888483,0.7518307824281008,0.5565804325251705,0.45568422953632226,0.44260011738678945,0.5042439839270396,0.4780757596279742,0.27955438168766095,0.16230303851189687,0.2141338209399973,0.17815251252878242,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.03321594654386205,0.0,0.0,0.0,0.0,0.0,0.0,0.0",
            "2019-11-05T15:05:10Z,Protein Bar,12,1.2,0,0.4265900251658661,0.42592748198715613,0.21389026281897364,0.3065731124576464,0.5484449411141326,0.2844063955372593,0.1802928081079952,0.12207227323586611,0.4811997364550083,0.4749402815658276,0.42145871371105664,0.37172544686391407,0.4294369562011062,0.3773096165912619,0.3268436410234597,0.43375022796927337,0.4825908093160342,0.4171252917534789,0.4066494310396252,0.2841501779039124,0.33142087976119555,0.3750085087902192,0.3094613717469182,0.24305828030742246,0.28947357659298356,0.22205164137829347,0.2193940558303178,0.2190780309899893,0.2789231965826739,0.1284116795853053",
            "2019-11-05T18:43:45Z,Fish fingers roast potatoes baked beans,31,4.6,0,0.0,0.48411214953271026,0.4818524538353877,0.7785046728971964,0.9546345207458576,1.7841956747482957,2.077071199602691,2.0154273330624406,2.1228655921260557,1.8986816560567066,1.6777687480247416,1.2326719039234277,1.1873831775700936,1.210280373831776,1.3793624994356406,0.8557609824371305,0.3223463813264708,0.7123414149623009,1.0892523364485982,0.4087862924724929,0.4803407942972229,0.40220340326836496,0.4569807764299459,0.5384900807130187,0.505509241131346,0.46725098058205417,0.3188561606272623,0.19962584909910544,0.045249017326006356,0.026341153063487638,0.04066462539966838,0.25770601331054427,0.30091726796005863,0.4793102569775001,0.48575148528498324,0.42487188987082375,0.26315580398590915,0.23510375196393352",
            "2019-11-07T09:14:48Z,Cheese sandwich,30,4.9,0,0.0,0.45662318840579713,0.5715821256038647,0.8136231884057971,1.1862463768115943,1.446328502415459,1.5973695652173914,1.8964927536231886,2.1746159420289857,2.6183212560386475,2.4772391304347825,1.906451690821256,1.7478695652173915,1.4062053140096622,1.4802463768115943,1.117582125603865,1.0015410628019326,0.9700410628019325,0.6779178743961354,0.21321256038647332,0.0,0.0,0.0,0.0,0.0,0.1658357487922706,0.1978768115942029,0.14537681159420288,0.26895893719806774,0.2870362318840567",
            "2019-11-07T13:02:45Z,Stuffed pasta (spinich and ricota),25,4.6,0,0.0,0.0,0.09691787439613525,0.392,1.0887874396135266,1.6730338164251208,1.8100748792270531,1.337828502415459,0.7635410628019323,0.2632946859903382,0.17175362318840573,0.0732125603864734,0.0,0.0,0.0,0.1108803603335319,0.21473825882191486,0.1759804743394101,0.14094167346787356,0.07863003728877814,0.09723519726652892,0.06223368477659241,0.05523903057449295,0.047169707741898055,0.06668150526125453,0.08657152192369272,0.06507255220194362,0.05871050780938107,0.05294453961783369,0.07410678112949674,0.07208751102521531,0.07276786206000208,0.06475827072002682,0.05895552964156254,0.054794188123137015,0.06021869360187484,0.10392827803011491,0.08382098078241144,0.098145679965131,0.08891304347826087,0.12818154707462798,0.1738195111670988,0.49622208456956557,0.6631231884057971,0.698123188405797,0.8141642512077295,0.9302053140096619,0.9582053140096618,0.8136231884057971,0.6550410628019325,0.48595893719806776,0.31337681159420283,0.22183574879227053,0.3734178743961352,0.018170667499306403",
            "2019-11-10T10:52:59Z,Croissants,40,6.4,1.3513351634554,0.0,0.3255,0.49645893719806766,1.206705314009662,2.2976570048309175,2.6737801932367153,2.1694927536231883,2.313533816425121,2.267492753623188,2.0278695652173915,1.6862053140096618,1.5066231884057968,1.225,0.5982125603864735,0.6337536231884059,0.9229178743961353,1.0325000000000002,0.8849589371980677,0.3182125603864734,0.4207946859903381,0.0,0.0,0.04871256038647344,0.4049178743961353,0.08829468599033813,0.10633574879227059,0.13137681159420292,0.0,0.0,0.0,0.0,0.20076466190806794,0.27565190106928245,0.12779217706364213,0.08057643101806096,0.09365869762807569,0.1068248267691422,0.1300634696048042,0.17190327245251202,0.25849984677197047,0.29339020080359046,0.3076237875747928,0.24320353563014255,0.22333459387534038,0.2223881571674357,0.24076747727989953,0.24612572588498155,0.19972297787131613,0.14670409408132476,0.12333986461330203,0.10857086520463324,0.12178072140551104,0.12353867307400455,0.08759402752403754,0.10528382324336845,0.13799580148296592,0.044775775909168335,0.06024756915597403,0.06663154043497285,0.04301143632394346,0.02868818671110573,0.01569126286380352,0.004565554139437252,0.0,9.364211597712645E-4,0.0,0.0027562926181670857,0.0049485125615760725,0.004590607640547318,0.0038590543344281377,0.0,0.0,0.0",
            "2019-11-10T13:23:41Z,Cookie,25,4.2,0,0.0,0.34981746369579686,0.4854712873365148,0.2275846345305609,0.1451718817907631,0.17079340424553272,0.1972743148903693,0.24337244852056097,0.32611990004608415,0.49751770284234137,0.5732545531262053,0.6106561753350366,0.49087178308680995,0.45872233111987104,0.4652718046016613,0.5136111330719602,0.5359380469491831,0.4444573817082101,0.3340890946016438,0.2878536654443209,0.26009081630515707,0.29998775862004917,0.313543211589934,0.22955946879888026,0.2856165244683235,0.3885999462929634,0.13130335995932865,0.1846500629464096,0.21433499437295386,0.14592474863966104,0.10324943541527877,0.060321775230746395,0.018904470613487833,0.0,0.004651699846323161,0.0,0.017599888719100253,0.03739553981449184,0.04305981457829417,0.04865182621106385,0.0,0.0,0.0,0.0,0.02081580333295716,0.013505705653696649,0.0,0.0,0.006263385605850399,0.04948866655768783,0.07540289521945402,0.13232428476168184,0.05326316425120774,0.0,0.05272525258098532,0.39290566987005604,0.6375746642921477,0.6325727701601628,0.3839047773575667",
            "2019-11-10T13:43:19Z,Cheese pastie and blueberries,35,2,0,0.15358743598344649,0.18084258411672982,0.2090581566296754,0.2581344455524966,0.3462113828270207,0.5286571669488329,0.609715535987966,0.6501355109667073,0.5231382280662341,0.48938886003759463,0.4969149075299424,0.5491574531917398,0.5736950602442096,0.4763416028672303,0.35850178323390836,0.30928667333847487,0.2798309736150904,0.3232047338289328,0.338297176019459,0.2480548558616722,0.30911043312160785,0.42124888265507104,0.14257625246221395,0.2008573332057696,0.2335779349545665,0.15933238875334335,0.11296334284433383,0.066136279053823,0.020772557718822006,0.0,0.005135729739351046,0.0,0.01953372594614065,0.041622768094068785,0.04807161791524018,0.054487469350930795,0.0,0.0,0.0,0.0,0.023762686679456798,0.015489214101527923,0.0,0.0,0.007299513711971979,0.058035455768207726,0.08902421258926183,0.15738102924798006,0.06386002415458937,0.0,0.06439793582481179,0.48508708375313236,0.7966644661426348,0.8011252974726875,0.9787111646714187,1.555657004830918,1.7416980676328504,1.6741159420289853,1.592533816425121,1.1552874396135266,0.7005410628019324",
            "2019-11-10T13:50:15Z,Liquorice,13,,0,0.21321951330501607,0.26334751071827345,0.3533065074763158,0.5396537858523138,0.6225914009034944,0.6640772797466521,0.5345328300284077,0.5002184661749232,0.5080893819086902,0.5617103132679947,0.5870286065351528,0.48760122595904054,0.3671229024792581,0.31685554539617267,0.2868020308654573,0.33140359773971,0.3470388137127377,0.25458633380574813,0.31740709356283553,0.43277855797479664,0.14655717205576257,0.20658078348411743,0.24037340463364193,0.16406717507532284,0.11639372101961983,0.06818961826468876",
            "2019-11-10T15:56:05Z,Sweets,10,0.6,0,0.10545575057727655,0.0334051399608356,0.0,0.008408889440420767,0.0,0.032610930827807715,0.07020859192692955,0.08196298071839118,0.09394989146653353,0.0,0.0,0.0,0.0,0.043690422450438256,0.02890231112650579,0.0,0.0,0.014306132127391763,0.11583148535309866,0.03787325489092619",
            "2019-11-10T20:03:41Z,Pizza,30,4.2,0,0.0,0.6935410628019325,0.3483161367325275,0.3740128174504518,0.467855054916921,0.5460677972391271,0.5249221586179271,0.7480141355031694,0.6045591749058167,0.7409837259163023,0.6893633042314883,0.691648479713907,0.9152626176425248,1.012462048131585,1.0393060134908203,0.8655612003512319,0.6821439859359936,0.7026699709973989,0.7154027159153509,0.5882484571924245,0.37708051472630855,0.37573769576166577,0.5558757861390562,0.6538006155037828,0.616803489167723,0.5523132584600908,0.5408062870818146,0.4776187758581503,0.36079446378486896,0.24429272037039582,0.1817541929948155,0.2778229791244662,0.45098636424149596,0.4678017891136877,0.4084339321533842,0.34925775964749856,0.2394240575170043,0.2088484359013596,0.17266226402668908,0.20132493075254815,0.1843055446692547,0.12210049537080202,0.10777280615970014,0.12374328445957826,0.13992767676842063,0.20168842762654066,0.2363911276240119,0.16098534022628955,0.029829824147854435,0.15086821074470597,0.34474739905729845,0.32119548005228893,0.23257923662024735,0.1460018081745312,0.08464774610983371,0.1404904416974892,0.19222669841735346,0.31369719691432335,0.27420230704240406,0.2380437296550185,0.3594167672294276,0.2635481727288513",
            "2019-11-13T14:28:59Z,Tuna pannini,72,10,8.6895661282732,0.0,0.0677022463189546,0.2622518593877428,0.30445223176589536,0.5195446330399988,1.020366518160785,1.2256279543628752,1.7840285738523352,1.8700821256038642,2.2479130434782606,1.9284154589371982,2.008289855072464,1.477710144927536,1.4403768115942026,1.3068357487922704,1.3330434782608696,1.1808357487922703,0.9394202898550723,0.9446280193236715,0.9498357487922704,0.9503768115942027,0.9509178743961352,0.8669178743961351,0.8697922705314008,1.039415458937198,0.873207729468599,0.878415458937198,0.7168743961352656,0.8112898550724638,0.6567487922705313,0.5867487922705313,0.6904975845410628,0.719038647342995,0.6817053140096617,1.1044106280193235,0.7825797101449274,0.9819951690821256,0.8572463768115941,0.6572898550724637,1.3849516908212558,0.9103719806763284,0.8724975845410626,1.0882463768115942,1.2147874396135265,1.1087053140096619,0.7326666666666667,1.1857053140096616,0.9437487922705313,0.24237137549967278,0.20593159888545481,0.1825430765973854,0.15332356652476362,0.15778414956956444,0.21448797245593668,0.20896207115385287,0.21717056327891057,0.2084719215363532,0.183671694470856,0.159006751453155,0.10427479043928364,0.009669228153442865,0.029683020225188136,0.04594243128212435,0.05842402566928907,0.11959719435350444,0.12912367839964844,0.17398023022164266,0.13661828842648738,0.1027016629247355,0.058363894996493054,0.034760694445231846,0.008542770569751989,-9.873377193611898E-4",
            "2019-11-14T18:23:59Z,Pasta and garlic bread,35,6.1,0,0.0,0.20454106280193235,0.2594789506753561,0.47833568376557034,0.5506018058581764,0.3978928108436305,0.2304484536741938,0.17332979830617673,0.27635758671600846,0.4511675539652173,0.7009922345299825,0.8624779884405552,0.8091388112382434,0.6643658897769709,0.4380772724691988,0.3350707463130522,0.18560911505296745,0.11938690874152469,0.1330550662238693,0.23145498084032723,0.28661280802715067,0.34173002789307766,0.18925823515420798,0.20123348756118817,0.21646744791795805,0.3544351255285978,0.4488178435327995,0.501460788556717,0.4512538281233398,0.3746893581516074,0.34597986643905204,0.24315983418307763,0.21667288949448418,0.14036261626157595,0.10327583969593461,0.061962918685954466,0.13795950361255105,0.17052412956221416,0.3265084434358575,0.4347248464035146,0.46906572070422203,0.4275877958892763,0.26948867394765114,0.20211027384415423,0.05300914936050494,0.0226460113401337,0.028955212461211913,0.2334178743961352,0.31795893719806756,0.3048339371980677,0.21154287439613526,0.10950181159420293,0.18091787439613533,0.24795893719806764,0.31500000000000006,0.301875,0.3864160628019324,0.39516606280193234,0.34125,0.20716787439613527,0.31795893719806756,0.49579106280193236,0.49579106280193236,0.3310839371980676,0.2552928743961353,0.08621074879227054,0.16200181159420288",
            "2019-11-15T09:44:37Z,Cheerios cereal,28,3.8,0,0.0,0.2157910628019324,0.4082910628019324,0.8106642512077294,1.0978713768115942,1.2655374396135266,1.415703502415459,1.201455314009662,0.8895410628019322,1.236455314009662,1.4011624396135267,1.490078502415459,1.2539553140096618,1.0309571256038648,0.9726660628019326,0.9857910628019323,0.9857910628019323,0.8837500000000001,0.7773339371980676,0.6665428743961355,0.5470018115942029,0.4230857487922705,0.2991696859903382,0.33558574879227054,0.28746074879227057,0.23496074879227055,0.4360839371980677,0.6372071256038648,0.6065821256038647,0.41562499999999997,0.48704106280193227,0.6604981884057971,0.5803321256038647,0.5089160628019324,0.2552928743961353,0.2509178743961353,0.14577922579847263,0.19782792662949314,0.2358964093054619,0.26456538732279083,0.1810036200081927",
            "2019-11-16T19:27:59Z,Gumbo with rice,60,6.1,0,0.0,2.09166425120773,2.435746376811595,2.1460410628019324,2.060958937198068,2.617205314009662,2.4726231884057968,2.6347053140096617,2.437623188405797,2.3075821256038647,0.8880693028493041",
            "2019-11-17T10:45:51Z,Porridge with caramel sauce,30,5.2,0,0.0,0.44558212560386473,0.3774589371980676,0.623,0.7454999999999999,1.3507463768115942,1.7589106280193236,1.128082125603865,0.7298768115942029,0.6523357487922706,0.6453357487922705,0.8004178743961353,0.7724178743961351,0.9875410628019324,0.9455410628019325,0.8965410628019325,0.8475410628019324,0.8760821256038649,0.4008768115942029,0.4259178743961353,0.7080821256038649,0.5640410628019324,0.6771231884057971,0.36400000000000005,0.22695893719806765,0.16745893719806768,0.2875410628019324,0.15400000000000003,0.18954106280193236,0.14754106280193238,0.11954106280193237,0.0,0.0,0.0245,0.0315,0.0,0.010187049629714999,0.0705202785703922,0.08992424325663188,0.15273195780269455,0.11246031307746224,0.15049755028502657,0.08345504265953504",
            "2019-11-17T13:48:34Z,Quiche,25,3.5,0,0.02077188756835262,0.14593865862767538,0.1889936311395035,0.3262269793953731,0.24430743234472976,0.3327873131592666,0.45009875386305215,0.4301676300982697,0.4740856458607818,0.5060821341896193,0.5637299939790466,0.4883634491449081,0.4455050887477609,0.43510488465958114,0.49966034375249474,0.601585236131272,0.6983067712379564,0.5892811250881731,0.43456157078832536,0.40222830546401195,0.3682441303088526,0.4156422739226981,0.3799930566455642,0.3037784254675625,0.3105073171624577,0.4793763624563756,0.181887718254096",
            "2019-11-17T14:08:30Z,Doughnut,26,3.1,0,0.25869119177587563,0.3526740737537746,0.4774051406754804,0.4566681186940011,0.5037501029314888,0.5382536146026514,0.6001468176151564,0.5204312368454302,0.4752485344406448,0.46464873852882493,0.5341754050397758,0.6438737010667958,0.7482753543659086,0.632218874911827,0.4668152408058776,0.4326485061301911,0.39663268128535045,0.4483166632753698,0.41046588055250366,0.32863944892857283,0.33645162003560986,0.5202878887513539,0.3730803133826174,0.34983273104966095,0.11589951794823794",
            "2019-11-17T15:59:52Z,Cough Sweet,4,,0,0.5402783451748809,0.5098315201580685,0.17001835644789734",
            "2019-11-17T18:12:17Z,Yoghurty drink,15,1.8,0,0.0,0.4477412462448269,0.5214387827203423,0.461446277013517,0.43494429896360415,0.4859101151155731,0.5016378230934391,0.48038064830039345,0.5383358988077855,0.8731231884057972",
            "2019-11-17T18:12:55Z,Kind protein bar,13,,0,0.0,0.44854619336869983,0.5223897196951166,0.46230009979807724,0.43576101504605785,0.48683626169602107,0.5026085537181552,0.4813246657092684,0.5394104780038087",
            "2019-11-17T19:43:59Z,Toad in the hole,60,7.1,0,0.0,1.1574178743961354,1.345876811594203,1.5593768115942028,1.8014178743961353,2.0825,2.2405410628019324,2.3635821256038647,2.5431642512077297,2.5326642512077298,2.17,1.7227946859903382,1.5152125603864737,1.7898357487922705,1.8988768115942027,1.8143357487922702,1.7898357487922705,1.666794685990338,1.695335748792271,1.6288357487922707,1.5518357487922705,1.4678357487922706",
            "2019-11-17T23:10:07Z,Hypo Squash,5,,0,0.0,0.19708212560386473,0.2291231884057971",
            "2019-11-18T10:12:59Z,Waffles,54,8.2,0.24927352270742,0.0,0.5890821256038647,0.6609589371980676,1.0890410628019325,1.0419178743961353,1.4495410628019325,1.906705314009662,2.0682463768115937,2.3743695652173913,1.9691642512077299,1.8035821256038649,1.532458937198068,2.518951690821256,2.219828502415459,2.0932874396135266,1.3009178743961354,1.5160410628019323,1.5515821256038649,1.0728768115942031,0.7562536231884057,0.6052125603864734,0.6197536231884059,0.6272946859903381,0.5537946859903381,0.5613357487922704,0.4878357487922705,0.49887681159420294,0.42887681159420293,0.35187681159420287,0.11279468599033818,0.2153768115942029,0.14887681159420285,0.33949999999999997,0.27649999999999997,0.2205,0.0,0.1930410628019324,0.0,0.0,0.0,0.0,0.0,0.0,0.07548729503861207,0.08162428001251061,0.15450625837896384,0.23234189900775312,0.24951807989305352,0.2628759891683678,0.24600414707417206,0.3841701666193234,0.39508709534572267,0.36200528920740216,0.31017847847198404,0.23886881357687667,0.226769958007591,0.21228467312945545,0.21421935671125886,0.21420881822593957,0.19588919266128704,0.17655909965038255,0.14360327015979193,0.04502946609311741,0.02165297529251946,0.006777313640811264,5.52096153671267E-4,0.008417623448735024,0.012188152529335286,0.01858253554967574,0.010874561724426886,0.011013494161594344,0.00845637691680296,0.0",
            "2019-11-18T13:35:56Z,Cheese Slice,36,5.7,0,0.0,0.0,0.18188951655559082,0.200815892641404,0.3885431669845918,0.5979223750663408,0.6579576092461537,0.7112638474262772,0.6840203042495184,1.0995762101922706,1.166200344267804,1.1042410876041922,0.9799857727357453,0.7836722492250556,0.7747711047943414,0.757756389672477,0.8018627688926059,0.8444143701798574,0.8172339957445098,0.7840640887554147,0.6834788554440729,0.23159762145748988,0.1215651693573203,0.0420604894442139,0.003849239294061173,0.06736034957596124,0.11532584075012459,0.21724762368699047,0.16870476210386215",
            "2019-11-18T13:51:32Z,Hypo Squash,5,,0,0.20997770174222066,0.4065327002403089,0.6260231655394326,0.6893528132762516,0.7457297286227463,0.6382629882898361",
            "2019-11-18T15:21:45Z,Throat sweet,4,,0,0.3288729124493927,0.17365866694436313,0.06045688290531297",
            "2019-11-18T15:36:42Z,Protein bar,34,4.3,0,0.005811224938740917,0.1024345873617772,0.17669856710701373,0.33546452675367205,0.26262260984545593,0.40788751475648666,0.6956873763103757,0.7042946859903382,0.9439178743961355,1.1765410628019324,1.2260821256038648,0.9304589371980677,0.7193768115942029",
            "2019-11-18T15:54:43Z,Throat sweet,4,,0,0.27663381511852564,0.42997580267612207,0.08119199556509193",
            "2019-11-18T17:10:50Z,Hypo Squash,5,,0,0.0,1.2543695652173914,0.9420289855072461",
            "2019-11-18T18:28:20Z,Salmon Carbonara,60,,0,0.0,0.565123188405797,0.336,0.18441787439613536,0.2794589371980677,0.4485410628019324,0.5365821256038648,0.6281231884057972,0.7266642512077295,0.666623188405797,0.6240821256038648,0.6730821256038648,0.799623188405797,0.40163441963296076,0.4639822242868347",
            "2019-11-18T19:32:21Z,Caramel Gateau,27,2.2,0,0.48898876877283626,0.5666409641189621,1.1356231884057972,1.4662463768115943,1.3636642512077297,1.2115410628019325,0.946876811594203",
            "2019-11-18T23:17:59Z,Throat sweet,4,,0,0.0,1.319753623188406,1.1121714975845407",
            "2019-11-19T10:13:44Z,Waffle,28,4.5,0,0.0,0.27299999999999996,0.17910065607186393,0.24976035292027518,0.3864315925032522,0.5109754834234511,0.7864413567156299,0.9352126821845747,0.9157730668149747,0.8877264042183438,0.6517799186016421,0.45235932679995344,0.36911678820550364,0.403678126134428,0.39324170044377166,0.21156264082770027,0.06806614841420851,0.20997402345952648,0.4745105845492647,0.6161751929741652,0.5470410147724193,0.5676833511797206,0.5140365035679039,0.46728081192416954,0.34121422023356235,0.2566175539013892,0.20659267601037218,0.1118627188484257,0.056819935520924195,0.04140747173664027,0.18763695569735042,0.24951439070278494,0.14646517667514003,0.16880028352234822,0.23225722365183013,0.13280951544943817,0.0335020896812082,0.0,0.0,0.0,0.034458937198067634",
            "2019-11-19T10:24:00Z,Waffle,27,0.1,0,0.1843582811262038,0.2571985842777926,0.3981094702986801,0.526647704982346,0.8109282085017614,0.9647800714386137,0.9451786240062813,0.9166842238009798,0.6733843326060874,0.4675996103981142,0.38176002338869924,0.41773974826170734,0.40717617395236366,0.21919098236070556,0.07056428636840013,0.21782066253081184,0.49257154105460005,0.6400711838374292,0.5686642992372427,0.5905630256318736,0.5351688104417578,0.4868834392835599,0.3558268425683701,0.26784138329667856,0.21582519838576317,0.11697302994384474,0.05947475046941399,0.043387214253697896,0.19682198150071722,0.2620266720991473,0.1539937605229276,0.1776997164776518,0.24482490195203457,0.1401904845505618,0.03541578471492707,0.0,0.0,0.0",
            "2019-11-19T15:17:48Z,Cheese on toast,30,4.9,0,0.0,0.20758212560386474,0.17095893719806762,0.1768768115942029,0.22533574879227056,0.418376811594203,0.4033731125716211,0.505320047596654,0.39034763227168856,0.22182913981283797,0.18239305181053345,0.21681219239734995,0.2355328999068889,0.3922944357237906,0.30740857359299306,0.1253710327222644,0.15899033455333506,0.20844146519179543,0.24162035754689898,0.23678628655662223,0.23662933849949933,0.2399391688278613,0.21747361105340976,0.2213429602344203,0.18050247520546756,0.26384447668625566,0.029463221018519947",
            "2019-11-19T15:48:12Z,Protein bar,35,1.4,0,0.44066795023031113,0.5527620780072108,0.4275702421244468,0.2433192795525138,0.20034884447581916,0.23850768498747318,0.25949608651053485,0.43288582730310726,0.3397673708133081,0.1388004879539657,0.17632643989917932,0.23158471041396697,0.26894646941232203,0.26407325816890925,0.2644250567776476,0.2686789274266279,0.2440459493814791,0.24894273870499609,0.2034810147626125,0.2981510296856661,0.700413590575683,0.9590000000000001,0.5160847881329998,0.49846223745875345",
            "2019-11-19T16:02:52Z,Throat sweet,4,,0,0.2536873294269188,0.20901172690205347,0.2489748086055151,0.27105727302983773",
            "2019-11-19T16:14:03Z,Throat sweet,4,,0,0.27987267775080626,0.46740186257696703,0.3672829927917668,0.15021994248486967",
            "2019-11-19T16:29:22Z,Sweets,10,,0,0.15698620858022794,0.19980241588834347,0.26292452165232433,0.3059505792300825,0.30102436556054796,0.3020650919459734,0.3075973505291245,0.2800293242007397,0.28631743871723414,0.2345977870795796",
            "2019-11-19T16:31:34Z,Sweets,10,,0,0.15795807705094317,0.2010570024594243,0.26459936176708676,0.3079281267992907,0.30299908061143715,0.30407662418978676,0.30967720148035105,0.2819523223692184,0.2883147911065521,0.23626070770542562",
            "2019-11-19T16:38:06Z,Sweets,10,,0,0.20478274439778557,0.26957312938062367,0.3138008438230001,0.3088633859140778,0.31005026539868713,0.31585372854762983,0.28766304420288247,0.29424632244452675,0.24119907804884713,0.35446343082614584",
            "2019-11-19T17:37:34Z,Sweets,10,,0,0.7425794630747297,0.721702013748976,0.6674178743961354",
            "2019-11-19T18:59:59Z,Fish and chips,75,8.5,0,0.0,1.4780821256038648,1.9266231884057974,2.382705314009662,2.8568285024154587,3.1869106280193242,3.2108695652173918,3.027246376811595,2.805123188405797,2.470458937198068,2.280376811594203,2.2348768115942024,2.2599178743961352,1.956521739130428",
            "2019-11-19T20:45:25Z,,28,2.6,0,0.0,1.7470410628019324,1.8455821256038647,1.7540410628019325,1.4864178743961354,0.9468599033816396",
            "2019-11-20T09:50:17Z,Bread and jam,15,1.8,0,0.0,0.21591787439613527,0.19087681159420294,0.48650000000000004,0.9337053140096618,1.201328502415459,1.1237874396135266,0.8841642512077295,0.47195893719806775,0.22533574879227056,0.13379468599033825,0.11979468599033816,0.09879468599033814,0.07079468599033821,0.0,0.0,0.0,0.18091787439613524,0.3045000000000001,0.3470410628019324,0.13595893719806765,0.0",
            "2019-11-20T15:19:59Z,Throat sweet,4,,0,0.5686247008652956,0.5160817802978587,0.410893421143804,0.30516289135408076",
            "2019-11-20T15:36:55Z,Hypo Squash,5,,0,0.2048579381283504,0.38164096142879894,0.6060304178332496,0.7353573400720107",
            "2019-11-20T15:43:49Z,Hypo Squash,10,,0,0.38912376313524094,0.6180840615028612,0.7501971128621551,1.0620643983035467,0.8216332715425234,0.5817030441989318,0.3427474428324286",
            "2019-11-20T16:12:10Z,Protein bar,12,1.1,0,0.37229853007749736,0.43655374476255554,0.49154267705658006,0.4312570424764441,0.4775937502515363,0.46364741060773557",
            ""
    };

    static String[] lineDataHypo = {
            "2020-04-26T14:38:25Z,,5,,0,0,0.0,0.9208391812865497,0.8849312865497077,0.9817763157894737,0.613709077572962,0.2535277910232544,0.07551901909342981,0.17675,0.25633918128654976,0.18241959064327487,0.21083918128654974,0.3338450292397661,0.10950434622848293",
            "2020-04-26T20:00:01Z,,5,,0,0,0.6981183841258026,0.7089251397974894,0.6518208682651782,0.6151785310041549,0.559856247770477,0.5811980243629216,0.5323029513424116,0.49625864592252533,0.15634120740904",
            "2020-04-28T15:07:13Z,,5,,0,0,0.6853652149944873,0.5987636954868487,0.7107522188214742,0.7205046403712296,0.6889557899569861,0.6756077021479983,0.6615402843093044,0.2585104539116717",
            "2020-05-01T23:49:29Z,,5,,0,0,0.18512464285483907,0.21129150216099146,0.34435899352866356,0.4152100843295716,0.423504474948655,0.3971179513998788,0.31044885481876466,0.2653517483879035,0.329958604616365,0.4038289233400507,0.45741936675963857,0.38772369210414864,0.22138767202088588,0.1900693148493735,0.2059899888765295,0.25121418500374104",
            "2020-05-02T10:34:50Z,,5,,0,0,0.10115380895816108,0.08154012894819211,0.14867486790348036,0.2586033391537768,0.3837593008521558,0.5981673006550244,0.47548496580386174,0.36265566153787926,0.3003379886118806,0.2815406944525938,0.31661207506972205,0.40699571444507954,0.4985011209582461,0.5835974009804669,0.20237563166947914",
            "2020-05-03T10:12:54Z,,5,,0,0,0.5180375334762392,0.4644657228880782,0.5592454660607402,0.5547955367772771,0.5518352521929824,0.4633108610749489,0.5720197000294501,0.687458068247542,0.6288318592527424",
            "2020-05-05T16:47:10Z,,5,,0,0,0.3469950598550997,0.5802945956956369,0.9019594486215537,1.110888888888889,1.0663326479417694,0.9855918058197706",
            "2020-05-08T12:14:56Z,,5,,0,0,0.25628209585607026,0.39532400403787643,0.5624132252333602,0.383493942015558,0.66362939786372,1.058548506502365,1.239487129734676,0.44082169875637434",
            "2020-05-09T02:23:30Z,,5,,0,0,0.020981087470449168,0.026368904876099126,0.03213098134630982,0.34377777777777774,0.501170634920635,0.608871925360475,0.6779581113276454,0.4159929942000048,0.03809165999094645,0.007000896665785047,0.007001829869819409,0.22124182338696796,0.2817978395061728,0.19760628019323673,0.2031010324483776,0.14513847180513847,0.025054153924566773,0.0,0.0,0.0,0.044522139713971405,0.06808829031051254,0.028122613592974414,0.3226432748538011,0.32289102277638,0.007020750325241368,0.007022465212961261,0.007024258946093563,0.04949917630588307,0.06900434403374812,0.08149148376771834,0.16196671354899206,0.07741706154131603",
            "2020-05-12T11:39:26Z,,5,,0,0,1.3727925703421673,1.5234273423987592,1.5556086442861687,0.5481714429729045",
            "2020-05-12T11:55:49Z,,5,,0,0,0.8704038537590364,0.936672089525695,0.6885479156055626,0.836095199860401,1.1092197880456116,0.5590611532036933",
            "2020-05-13T20:28:27Z,,5,,0,0,0.2393370525770526,0.15652096382822644,0.1288071189164371,0.10039543021739553,0.12823129887106355,0.15511999999999998,0.16439489940050916,0.17261596837944665,0.162438068448195,0.15164218529379817,0.1419269909622541,0.13158756061735924,0.12348130436787971,0.13989224835770286,0.11984255892255893,0.13815009658630095,0.10008106739032113,0.10229530521499985,0.0841465625,0.1044755911111111,0.10442287575205607,0.1031957377698554,0.10137650644374782,0.06005507344834778,0.059212012243648623,0.07776672897196261,0.0752176923076923,0.0714138613861386,0.06757714285714284,0.06433515789473684,0.10389848631239935,0.1467663965497673,0.12764421893352126,0.08813585818019552,0.06945749999999999,0.07226181818181816,0.0745027027027027,0.03466700271806275,0.03446041967664258,0.032864921277552854,0.0,0.0,0.0,0.06009962264150943,0.0992300678362573,0.09458195844220481,0.08746162280701755,0.1044190195113953,0.09940409356725148,0.1401892296237594",
            "2020-05-14T13:50:08Z,,5,,0,0,0.091319407674586,0.1260708403411601,0.190929255929813,0.21969585220805346,0.26414075635335854,0.3381021521501236,0.36738627910049854,0.16729130229712752,0.17074547279715452,0.17712347370628362,0.19558308250636483,0.19854349179777966,0.15447608364164656,0.12605032225531443,0.10482478314745973,0.11789401046091226,0.11855911732800394,0.1256322592140089,0.07943619040750277,0.05929171148706202,0.11954173163062048,0.16883576628365163,0.1521659754370637,0.1490857427378093,0.11558690732585503,0.09638536828963794,0.06329924016626909,0.053743927992220275,0.08346327391028574,0.11227943565538692,0.13024302671494853,0.12532816137834435,0.10000999097731125,0.07135927956590167,0.054129537602153534,0.011446789528327651",
            "2020-05-14T13:54:40Z,,5,,0,0,0.12750754507439271,0.1931365305648397,0.22227292965330922,0.267285289167089,0.3421879787622097,0.3718940862060261,0.16937592911702942,0.17290680789585267,0.17940158912372778,0.1981397241077552,0.20118194351602256,0.1565635982854526,0.12778297273305073,0.10629086403064097,0.11957221701551599,0.12027736540522138,0.12748660990351454,0.08063071958656295,0.06020039672058021,0.12140957118734895,0.17152637610490507,0.1546402189401054,0.1515601948994327,0.11754600745002206,0.09805437899595201,0.06441958070018536,0.05471666877036001,0.08500889009380955,0.11440795576259805,0.13277201752494752,0.1278222541420925,0.10205101120133801,0.07285371474005668,0.05529361367961921,0.03182244893843352",
            "2020-05-14T13:56:31Z,,5,,0,0,0.12822589744100898,0.1942401678823531,0.2235614683759371,0.2688575555739542,0.34423089206825275,0.3741479897587899,0.17041824252698037,0.17398747544520177,0.18054064683244986,0.19941804490845041,0.20250116937514404,0.15760735560735561,0.12864929797191887,0.1070239044722316,0.12041132029281784,0.1211364894438301,0.12841378524826738,0.08122798417609305,0.060654739337339295,0.12234349096571315,0.17287168101553177,0.15587734069162623,0.1527974209802444,0.11852555751210557,0.09888888434910906,0.0649797509671435,0.05520303915942987,0.08578169818557145,0.11547221581620362,0.13403651292994703,0.1290693005239666,0.10307152131335139,0.07360093232713419,0.05222622652454553",
            "2020-05-14T15:29:05Z,,5,,0,0,0.1657707606596495,0.2354283593596736,0.21340350213734544,0.21032843373798824,0.16407463539898912,0.13769338327091135,0.0910276683806967,0.07781926225117868,0.12171727445250004,0.1649603083088623,0.1928355492624238,0.187056957281111,0.15052524152197355,0.10834655012623814,0.0829404205194288,0.119411711337817,0.14394569939650176,0.13483572860962567,0.15065209833362703,0.15731756353213996,0.2134441043830941,0.2303804185791386,0.20617530616553403,0.18923722219613567,0.14036015856883816,0.15201719599390837,0.10710880720236482,0.07759296594057837,0.09259403622860087,0.16380224229831886,0.24440989803757937,0.172786536527228",
            "2020-05-14T16:10:28Z,,5,,0,0,0.1375598403336191,0.18677763940777636,0.21875770506491354,0.21262140810952945,0.17144569881824784,0.12366451066132698,0.09487220031345191,0.1368969976408545,0.16540669457925294,0.15531078369479104,0.17396053618901836,0.18212533316605437,0.2477625682250818,0.2681628072261174,0.24067811250343976,0.2215652476546422,0.16484852665957161,0.17911591354064857,0.1266264120703513,0.09205347322950434,0.11025150360242708,0.1957826800803716,0.29329187764509523,0.433046807641879,0.4637909313463048",
            ""
    };

    @Test
    public void estimateCarbsDistributionFromAborptionHistoryDataCapture() {

        double avgAvgPredictionScore = 0d;
        int count = 0;

        for(int line = 0; line < lineData.length; line++) {

            String[] splitData = lineData[line].split(",");

            if (splitData.length < 5) continue;

            String date = splitData[0];
            String notes = splitData[1];
            Double carbs = Double.parseDouble(splitData[2]);
            String insulinGiven = splitData[3];
            String discarded = splitData[4];

            //if (!notes.toLowerCase().contains("protein bar")) continue;

            count++;

            double deviations[] = new double[splitData.length - 5];
            for(int i = 5; i < splitData.length; i++){
                deviations[i-5] = Double.parseDouble(splitData[i]);
            }

            System.out.println("\n\n---------------------------------------");
            System.out.println(notes+" ("+carbs+" g)");

            double avgPredictionError = runPrediction(carbs, notes, deviations, false);

/*
            if (true) {
                activeCarb.estimateCarbsDistributionFromAborptionHistory();
                activeCarb.carbAbsorptionHistory.clear();
                List<Double> predictionTriangles = activeCarb.getPredicatedCarbsFromTriangles(deviations.length);
                List<Double> predictionCurves = activeCarb.getPredicatedCarbsFromCurves(deviations.length);
                for (int i = 0; i < deviations.length; i++) {
                    System.out.print(i * 5);
                    System.out.print(",");
                    System.out.println(deviations[i] / carbs);

                }
            }
*/
            avgAvgPredictionScore += avgPredictionError;

        }

        avgAvgPredictionScore = avgAvgPredictionScore / count;
        System.out.println("\n\nAvg Overall score: "+avgAvgPredictionScore);

        //Assert.assertEquals(0, avgPredictionError, 0.2);

    }

    @Test
    public void calculateMinimumAbsorbsionCurve() {
        List<Double> minCumalativeCurve = new ArrayList<>();

        for(int line = 0; line < lineData.length; line++) {

            String[] splitData = lineData[line].split(",");

            if (splitData.length < 5) continue;

            String date = splitData[0];
            String notes = splitData[1];
            Double carbs = Double.parseDouble(splitData[2]);
            String insulinGiven = splitData[3];
            String discarded = splitData[4];

            double soFar = 0d;
            for (int i = 5; i < splitData.length; i++) {
                soFar += Double.parseDouble(splitData[i]) / carbs;
                if (minCumalativeCurve.size() <= i - 5 || soFar < minCumalativeCurve.get(i - 5)) {
                    minCumalativeCurve.add(i - 5, soFar);
                }
            }
        }

        double lastValue = 0f;
        for (int i = 0; i < minCumalativeCurve.size(); i++) {
            System.out.print((minCumalativeCurve.get(i) - lastValue)+", ");
            lastValue = minCumalativeCurve.get(i);
        }

    }

    @Test
    public void calculateMinimumAbsorbsionCurveHypoTreatment() {
        List<Double> minCumalativeCurve = new ArrayList<>();

        for(int line = 0; line < lineDataHypo.length; line++) {

            String[] splitData = lineDataHypo[line].split(",");

            if (splitData.length < 5) continue;

            String date = splitData[0];
            String notes = splitData[1];
            Double carbs = Double.parseDouble(splitData[2]);
            String insulinGiven = splitData[3];
            String discarded = splitData[4];

            double soFar = 0d;
            for (int i = 5; i < splitData.length; i++) {
                soFar += Double.parseDouble(splitData[i]) / carbs;
                if (minCumalativeCurve.size() <= i - 5 || soFar < minCumalativeCurve.get(i - 5)) {
                    minCumalativeCurve.add(i - 5, soFar);
                }
            }
        }

        double lastValue = 0f;
        for (int i = 0; i < minCumalativeCurve.size(); i++) {
            System.out.print((minCumalativeCurve.get(i) - lastValue)+", ");
            lastValue = minCumalativeCurve.get(i);
        }

    }

}
